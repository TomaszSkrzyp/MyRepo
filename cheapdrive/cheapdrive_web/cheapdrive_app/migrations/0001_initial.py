# Generated by Django 5.1.4 on 2024-12-22 13:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='custom_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guest_session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('starting_address', models.CharField(max_length=255)),
                ('finishing_address', models.CharField(max_length=255)),
                ('distance', models.DecimalField(decimal_places=1, help_text='Distance of trip', max_digits=5, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('duration', models.DecimalField(decimal_places=1, help_text='Duration of the trip - in minutes', max_digits=5, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cheapdrive_app.user')),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guest_session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('tank_size', models.DecimalField(decimal_places=2, help_text="The size of the vehicle's fuel tank in liters.", max_digits=5, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('fuel_type', models.CharField(choices=[('D', 'Diesel'), ('P', 'Pb95')], help_text='The type of fuel used by the vehicle.', max_length=3)),
                ('cur_fuel', models.DecimalField(decimal_places=2, help_text='The current amount of fuel in the tank in liters.', max_digits=5, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('fuel_consumption_per_100km', models.DecimalField(decimal_places=2, help_text="The vehicle's fuel consumption in liters per kilometer.", max_digits=5, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('price_of_fuel', models.DecimalField(decimal_places=2, help_text='The price the stored gas was purchased for.', max_digits=4, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('currency', models.CharField(default='PLN', help_text='The currency of the purchase price.', max_length=3)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cheapdrive_app.user')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('cur_fuel__lte', models.F('tank_size'))), name='cheapdrive_app_vehicle_data_cur_fuel_lte_tank_size')],
            },
        ),
    ]
